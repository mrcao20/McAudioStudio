/*
 * MIT License
 *
 * Copyright (c) 2021 mrcao20
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include "McSquareWaveGenerator.h"

// Square Wave is generated by adding odd-numbered harmonics with decreasing amplitude https://youtu.be/YsZKvLnf7wU?t=363
qreal McSquareWaveGenerator::generate(const McTone &tone, qreal timeIndexSeconds) noexcept
{
    qreal firstHarmonicPeriodSeconds = 1.0 / tone.freq;
    qreal firstHarmonicRadians = timeIndexSeconds / firstHarmonicPeriodSeconds * (2 * M_PI);

    qreal thirdHarmonicPeriodSeconds = 1.0 / (tone.freq * 3);
    qreal thirdHarmonicRadians = timeIndexSeconds / thirdHarmonicPeriodSeconds * (2 * M_PI);
    qreal thirdHarmonicAmplitude = 1.0 / 3.0;

    qreal fifthHarmonicPeriodSeconds = 1.0 / (tone.freq * 5);
    qreal fifthHarmonicRadians = timeIndexSeconds / fifthHarmonicPeriodSeconds * (2 * M_PI);
    qreal fifthHarmonicAmplitude = 1.0 / 5.0;

    qreal seventhHarmonicPeriodSeconds = 1.0 / (tone.freq * 7);
    qreal seventhHarmonicRadians = timeIndexSeconds / seventhHarmonicPeriodSeconds * (2 * M_PI);
    qreal seventhHarmonicAmplitude = 1.0 / 7.0;

    qreal ninthHarmonicPeriodSeconds = 1.0 / (tone.freq * 9);
    qreal ninthHarmonicRadians = timeIndexSeconds / ninthHarmonicPeriodSeconds * (2 * M_PI);
    qreal ninthHarmonicAmplitude = 1.0 / 9.0;

    // ... continue to infinite

    qreal result = sin(firstHarmonicRadians) + thirdHarmonicAmplitude * sin(thirdHarmonicRadians)
                   + fifthHarmonicAmplitude * sin(fifthHarmonicRadians)
                   + seventhHarmonicAmplitude * sin(seventhHarmonicRadians)
                   + ninthHarmonicAmplitude * sin(ninthHarmonicRadians);

    return result;
}
